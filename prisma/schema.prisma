// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

enum Roles {
  OWNER
  EMPLOYEE
  CLIENT
}

model User {
  id            Int            @id @default(autoincrement())
  firstName     String?
  lastName      String?
  email         String?        @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Roles          @default(CLIENT)
  laptops       Laptop[]       @relation("UserToLaptop")
  graphics      Graphic[]      @relation("UserToGraphic")
  category      Category[]     @relation("UserToCategory")
  laptopOrders  LaptopOrder[]  @relation("UserToLaptopOrder")
  graphicOrders GraphicOrder[] @relation("UserToGraphicOrder")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Laptop {
  id         Int           @id @default(autoincrement())
  name       String        @unique @db.VarChar(30)
  brand      String        @db.VarChar(30)
  model      String        @db.VarChar(30)
  quantity   Float
  screenSize Float
  RAM        String
  storage    String
  color      String
  image      Image[]
  price      Float
  order      LaptopOrder[]
  userId     Int
  user       User          @relation("UserToLaptop", fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  graphic     Graphic[]
  userId      Int
  user        User      @relation("UserToCategory", fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model Graphic {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String
  quantity    Float
  thickness   Float?         @default(0)
  corners     Corners[]
  material    Materials[]
  size        Size[]
  price       Float
  image       Image[]
  color       Color[]
  lamination  Lamination[]
  categoryId  Int
  category    Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  order       GraphicOrder[]
  userId      Int
  user        User           @relation("UserToGraphic", fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([userId])
}

model Color {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(20)
  value    String    @db.VarChar(10)
  graphics Graphic[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Size {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(20)
  value    String    @db.VarChar(10)
  graphics Graphic[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  graphicId Int
  graphics  Graphic  @relation(fields: [graphicId], references: [id])
  laptopId  Int
  laptops   Laptop   @relation(fields: [laptopId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lamination {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  image     String
  graphics  Graphic[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Corners {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  image     String
  graphics  Graphic[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Materials {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  image     String
  graphics  Graphic[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// enum Size {
//   large
//   small
//   meduim
//   extraLarge
//   doubleExtraLarge
// }

model LaptopOrder {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation("UserToLaptopOrder", fields: [userId], references: [id])
  name      String   @default("")
  email     String   @default("")
  phone     String   @default("")
  address   String   @default("")
  laptops   Laptop[]
  isPaid    Boolean  @default(false)
  pricePaid Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model GraphicOrder {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation("UserToGraphicOrder", fields: [userId], references: [id])
  name      String    @default("")
  email     String    @default("")
  phone     String    @default("")
  address   String    @default("")
  graphics  Graphic[]
  isPaid    Boolean   @default(false)
  pricePaid Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}
